link(rel='stylesheet', href='http://localhost:5000/stylesheets/jquery-ui-1.8.18.custom.css')
link(rel='stylesheet', href='http://localhost:5000/stylesheets/earthscope.css')
script(type='text/javascript', src='http://localhost:5000/javascripts/jquery-1.7.1.min.js')
script(type='text/javascript', src='http://localhost:5000/javascripts/jquery-ui-1.8.18.custom.min.js')
script(type='text/javascript', src='http://localhost:5000/javascripts/coordinate_transforms.js')
script(type='text/javascript', src='http://localhost:5000/javascripts/functional_arrays.js')
script(type='text/javascript', src='http://localhost:5000/javascripts/kinetic-v3.9.1.min.js')

:coffeescript
  makeIdentity= (a) ->
    for i in [0..16]
      a[i] = 0.0
    a[0] = a[5] = a[10] = a[15] = 1.0

  swap= (a, b, c) ->
    temp = a[b]
    a[b] = a[c]
    a[c] = temp

  transpose= (a) ->
    swap a, 1, 4
    swap a, 2, 8
    swap a, 3, 12
    swap a, 6, 9
    swap a, 7, 13
    swap a, 11, 14
    return a

  mul= (a, b) ->
    m = new Array 16

    for i in [0..4]
      m[i * 4]     = a[i * 4] * b[0] + a[i * 4 + 1] * b[4] + a[i * 4 + 2] * b[8]  + a[i * 4 + 3] * b[12]
      m[i * 4 + 1] = a[i * 4] * b[1] + a[i * 4 + 1] * b[5] + a[i * 4 + 2] * b[9]  + a[i * 4 + 3] * b[13]
      m[i * 4 + 2] = a[i * 4] * b[2] + a[i * 4 + 1] * b[6] + a[i * 4 + 2] * b[10] + a[i * 4 + 3] * b[14]
      m[i * 4 + 3] = a[i * 4] * b[3] + a[i * 4 + 1] * b[7] + a[i * 4 + 2] * b[11] + a[i * 4 + 3] * b[15]

    for i in [0..16]
      a[i] = m[i]

  mul2= (a, b) ->
    m = new Array 16

    for i in [0..4]
      m[i * 4]     = a[i * 4] * b[0] + a[i * 4 + 1] * b[4] + a[i * 4 + 2] * b[8]  + a[i * 4 + 3] * b[12]
      m[i * 4 + 1] = a[i * 4] * b[1] + a[i * 4 + 1] * b[5] + a[i * 4 + 2] * b[9]  + a[i * 4 + 3] * b[13]
      m[i * 4 + 2] = a[i * 4] * b[2] + a[i * 4 + 1] * b[6] + a[i * 4 + 2] * b[10] + a[i * 4 + 3] * b[14]
      m[i * 4 + 3] = a[i * 4] * b[3] + a[i * 4 + 1] * b[7] + a[i * 4 + 2] * b[11] + a[i * 4 + 3] * b[15]

    return m

  mul_v= (a, b) ->
    c = new Array 4
    c[0] = a[0]  * b[0] + a[1]  * b[1] + a[2]  * b[2] + a[3] * b[3]
    c[1] = a[4]  * b[0] + a[5]  * b[1] + a[6]  * b[2] + a[7] * b[3]
    c[2] = a[8]  * b[0] + a[9]  * b[1] + a[10] * b[2] + a[11] * b[3]
    c[3] = a[12] * b[0] + a[13] * b[1] + a[14] * b[2] + a[15] * b[3]
    return [c[0], c[1], c[2], c[3]]

  mag= (v) ->
    return Math.sqrt (v[0] * v[0] + v[1] * v[1] + v[2] * v[2])

  normalize= (v) ->
    d = mag v
    if d == 0.0
      return [v[0], v[1], v[2]]
    return [v[0] / d, v[1] / d, v[2] / d]

  scale_m= (mat, p) ->
    s = [p[0], 0.0,  0.0,  0.0,
         0.0,  p[1], 0.0,  0.0,
         0.0,  0.0,  p[2], 0.0,
         0.0,  0.0,  0.0,  1.0]
    mul mat, s

  rotate= (mat, angle, axis) ->
    angleRads = angle * DEG2RAD
    c = Math.cos (angleRads)
    s = Math.sin (angleRads)
    a = normalize (axis)
  
    x = a[0]
    y = a[1]
    z = a[2]

    r = [x * x * (1.0 - c) + c,      x * y * (1.0 - c) - z * s,  x * z * (1.0 - c) + y * s,  0.0,
         x * y * (1.0 - c) + z * s,  y * y * (1.0 - c) + c,      y * z * (1.0 - c) - x * s,  0.0,
         x * z * (1.0 - c) - y * s,  y * z * (1.0 - c) + x * s,  z * z * (1.0 - c) + c,      0.0,
         0.0,                        0.0,                        0.0,                        1.0]
    mul mat, r

  translate= (mat, p) ->
    t = [1.0,  0.0,  0.0,  0.0,
         0.0,  1.0,  0.0,  0.0,
         0.0,  0.0,  1.0,  0.0,
         p[0], p[1], p[2],  1.0]
    mul mat, t

  makeFrustum= (proj, l, r, b, t, n, f) ->
    m = [2.0 * n / (r - l), 0.0,                (r + l) / (r - l),      0.0,
         0.0,               2.0 * n / (t - b),  (t + b) / (t - b),      0.0,
         0.0,               0.0,               -(f - n) / (f - n),     -1.0,
         0.0,               0.0,               -2.0 * f * n / (f - n),  0.0]
        
    mul proj, m

  DEG2RAD = Math.PI / 180.0;
 
  makePerspective= (proj, fov, aspect, znear, zfar) ->
    ymax = znear * Math.tan (fov * DEG2RAD / 2.0)
    ymin = -ymax
    xmin = ymin * aspect
    xmax = ymax * aspect
  
    makeFrustum proj, xmin, xmax, ymin, ymax, znear, zfar

  cross= (v, u) ->
    [v[1] * u[2] - v[2] * u[1],
     v[2] * u[0] - v[0] * u[2],
     v[0] * u[1] - v[1] * u[0]]

  gluLookAt= (modelView, eye, center, up) ->
    c = [eye[0] - center[0], eye[1] - center[1], eye[2] - center[2]]
    a = cross up, c
    b = cross c, a

    x = normalize a
    y = normalize b
    z = normalize c

    m = [x[0], y[0], z[0], 0.0,
         x[1], y[1], z[1], 0.0,
         x[2], y[2], z[2], 0.0,
         0.0,  0.0,  0.0,  1.0]

    mul modelView, m
    translate modelView, [eye[0] * -1.0, eye[1] * -1.0, eye[2] * -1.0]

  fixPolyVertex= (vertex, projection, modelView) ->
    v = mul_v mul2(projection, modelView), toWebGL vertex
    return {x: v[0] + 400.0, y: v[1] + 240.0}

  fixVertex= (vertex, projection, modelView) ->
    v = mul_v mul2(projection, modelView), toWebGL vertex
    return [v[0] + 400.0, v[1] + 240.0]
 
  class Polygon
    constructor: (shape) ->
      @shape = shape
      @header = @shape.header

      numParts = @header[5]
      numPoints = @header[6]

      @partsIndex = @shape.partsIndex

      @parts = @shape.parts

    eachVertex: (action) ->
      args = Array.prototype.slice_args arguments
      args.unshift (part) ->
        args2 = Array.prototype.slice_args arguments, 1
        part.apply.apply part, args2
        return

      @parts.for_each.apply @parts, args
      return

  $(document).ready ->
    projection = new Array 16
    makeIdentity projection
    makePerspective projection, 60.0, 1.0, 1.0, 1000.0

    modelView = new Array 16
    makeIdentity modelView
    rotate  modelView, 223.5, [1.0, 0.0, 0.0]
    rotate  modelView, 8.0, [0.0, 1.0, 0.0]
    rotate modelView, -5.0, [1.0, 0.0, 0.0]
    scale_m modelView, [600.0, 600.0, 600.0]

    stage = new Kinetic.Stage
      container: 'screen',
      width: 800,
      height: 480

    curFrame = 0
    stations = new Array()
    $.getJSON 'http://appolition.com:4000/4', (shape) ->
      $('#messages').html ''
      poly = new Polygon shape
      poly.eachVertex fixPolyVertex, projection, modelView
      usLayer = new Kinetic.Layer()
      for part in poly.parts
        ply = new Kinetic.Polygon
          stroke: '#1b3664',
          strokeWidth: 1,
          points: part
        usLayer.add ply
      stage.add usLayer

      $.getJSON 'http://appolition.com:4000/27', (shape) ->
        $('#messages').html ''
        poly = new Polygon shape
        poly.eachVertex fixPolyVertex, projection, modelView
        canadaLayer = new Kinetic.Layer()
        for part in poly.parts
          ply = new Kinetic.Polygon
            stroke: '#1b3664',
            strokeWidth: 1,
            points: part
          canadaLayer.add ply
        stage.add canadaLayer

        $.getJSON 'http://appolition.com:4000/18', (shape) ->
          $('#messages').html ''
          poly = new Polygon shape
          poly.eachVertex fixPolyVertex, projection, modelView
          mexicoLayer = new Kinetic.Layer()
          for part in poly.parts
            ply = new Kinetic.Polygon
              stroke: '#1b3664',
              strokeWidth: 1,
              points: part
            mexicoLayer.add ply
          stage.add mexicoLayer

          $('#messages').html 'Loading data...'

          $.getJSON 'http://localhost:5000/stations', (stats) ->
            stationLayer = new Kinetic.Layer()
            for station in stats
              lat = parseFloat station.loc[0]
              lon = parseFloat station.loc[1]
              station.loc = fixVertex [lat, lon], projection, modelView
             
              if station.samples
                station.circle = new Kinetic.Circle
                  x: station.loc[0],
                  y: station.loc[1],
                  radius: 3,
                  fill: '#ffffff',
                  stroke: '#1b3664',
                  strokeWidth: 1,
                  listen: false
              #else
              #  station.circle.fill = '#fecd08'
                stations.push station
                stationLayer.add station.circle
            stage.add stationLayer

            $('#messages').html ''
            $('#pblabel').show()

            setInterval () ->
              if curFrame >= stations[0].samples.length - 1
                curFrame = 0

              $('#progressbar').progressbar({ value: curFrame / (stations[0].samples.length - 1.0) * 100.0 })

              for station in stations 
                if !station.samples
                  continue
                val = station.samples[curFrame]
                val /= 100.0
                if val < -0.75
                  val = Math.abs val
                  station.circle.fill = 'rgba(0, 0, 255, ' + val + ')'
                  station.circle.radius = 1
                else if val < -0.25
                  val = Math.abs val
                  station.circle.fill = 'rgba(0, 0, 255, ' + val + ')'
                  station.circle.radius = 2
                else if val > 0.25
                  station.circle.fill = 'rgba(255, 0, 0, ' + val + ')'
                  station.circle.radius = 4
                else if val > 0.75
                  station.circle.fill = 'rgba(255, 0, 0, ' + val + ')'
                  station.circle.radius = 5
                else
                  val = Math.abs val
                  station.circle.fill = 'rgba(255, 0, 0, ' + val + ')'
                  station.circle.radius = 3
              curFrame += 1
              stationLayer.draw()
            , 25

            stage.start()
    return

.content_header
  span= 'EarthScope Viewer'
.content_body
  .content_wrapper
    br
    #viewer
      #messages
      #screen
      .clear

    #progressbar
    #pblabel
      table
        tr
          td.left 8:50 PM
          td.middle 9:50 PM
          td.right 10:50 PM

      #description
        p Here are the seismic waves crossing the U.S from the 8.6 magnitude quake that hit off of the west coast of North Sumatra on April, 11, 2012 at 08:38:37 UTC.
